import pytest
import pickle
import numpy as np
from app import app  # Import Flask app from app.py
# Load the trained model
with open("model.pkl", "rb") as file:
model = pickle.load(file)
@pytest.fixture
def client():
"""Creates a test client for the Flask app."""
app.config["TESTING"] = True
with app.test_client() as client:
yield client
def test_home_route(client):
"""Test if the home route ("/") loads successfully."""
response = client.get("/")
assert response.status_code == 200
assert b"Enter Sepal and Petal dimensions" in response.data  # Check if form is in HTML
def test_valid_prediction(client):
"""Test model prediction with valid inputs."""
valid_data = {
"sepal_length": "5.1",
"sepal_width": "3.5",
"petal_length": "1.4",
"petal_width": "0.2"
}
response = client.post("/", data=valid_data)
assert response.status_code == 200
assert any(species.encode() in response.data for species in [b"Setosa", b"Versicolor", b"Virginica"])
def test_invalid_input(client):
"""Test handling of non-numeric input."""
invalid_data = {
"sepal_length": "abc",
"sepal_width": "xyz",
"petal_length": "1.4",
"petal_width": "0.2"
}
response = client.post("/", data=invalid_data)
assert response.status_code == 200
assert b"Invalid input! Please enter numeric values." in response.data
import pytest
import pickle
import numpy as np
from app import app  # Import Flask app from app.py
# Load the trained model
with open("model.pkl", "rb") as file:
model = pickle.load(file)
@pytest.fixture
def client():
"""Creates a test client for the Flask app."""
app.config["TESTING"] = True
with app.test_client() as client:
yield client
def test_home_route(client):
"""Test if the home route ("/") loads successfully."""
response = client.get("/")
assert response.status_code == 200
assert b"Enter Sepal and Petal dimensions" in response.data  # Check if form is in HTML
def test_valid_prediction(client):
"""Test model prediction with valid inputs."""
valid_data = {
"sepal_length": "5.1",
"sepal_width": "3.5",
"petal_length": "1.4",
"petal_width": "0.2"
}
response = client.post("/", data=valid_data)
assert response.status_code == 200
assert any(species.encode() in response.data for species in [b"Setosa", b"Versicolor", b"Virginica"])
def test_invalid_input(client):
"""Test handling of non-numeric input."""
invalid_data = {
"sepal_length": "abc",
"sepal_width": "xyz",
"petal_length": "1.4",
"petal_width": "0.2"
}
response = client.post("/", data=invalid_data)
assert response.status_code == 200
assert b"Invalid input! Please enter numeric values." in response.data
import pytest
import pickle
import numpy as np
from app import app  # Import Flask app from app.py
# Load the trained model
with open("model.pkl", "rb") as file:
model = pickle.load(file)
@pytest.fixture
def client():
"""Creates a test client for the Flask app."""
app.config["TESTING"] = True
with app.test_client() as client:
yield client
def test_home_route(client):
"""Test if the home route ("/") loads successfully."""
response = client.get("/")
assert response.status_code == 200
assert b"Enter Sepal and Petal dimensions" in response.data  # Check if form is in HTML
def test_valid_prediction(client):
"""Test model prediction with valid inputs."""
valid_data = {
"sepal_length": "5.1",
"sepal_width": "3.5",
"petal_length": "1.4",
"petal_width": "0.2"
}
response = client.post("/", data=valid_data)
assert response.status_code == 200
assert any(species.encode() in response.data for species in [b"Setosa", b"Versicolor", b"Virginica"])
def test_invalid_input(client):
"""Test handling of non-numeric input."""
invalid_data = {
"sepal_length": "abc",
"sepal_width": "xyz",
"petal_length": "1.4",
"petal_width": "0.2"
}
response = client.post("/", data=invalid_data)
assert response.status_code == 200
assert b"Invalid input! Please enter numeric values." in response.data
import pytest
import pickle
import numpy as np
from app import app  # Import Flask app from app.py
# Load the trained model
with open("model.pkl", "rb") as file:
model = pickle.load(file)
@pytest.fixture
def client():
"""Creates a test client for the Flask app."""
app.config["TESTING"] = True
with app.test_client() as client:
yield client
def test_home_route(client):
"""Test if the home route ("/") loads successfully."""
response = client.get("/")
assert response.status_code == 200
assert b"Enter Sepal and Petal dimensions" in response.data  # Check if form is in HTML
def test_valid_prediction(client):
"""Test model prediction with valid inputs."""
valid_data = {
"sepal_length": "5.1",
"sepal_width": "3.5",
"petal_length": "1.4",
"petal_width": "0.2"
}
response = client.post("/", data=valid_data)
assert response.status_code == 200
assert any(species.encode() in response.data for species in [b"Setosa", b"Versicolor", b"Virginica"])
def test_invalid_input(client):
"""Test handling of non-numeric input."""
invalid_data = {
"sepal_length": "abc",
"sepal_width": "xyz",
"petal_length": "1.4",
"petal_width": "0.2"
}
response = client.post("/", data=invalid_data)
assert response.status_code == 200
assert b"Invalid input! Please enter numeric values." in response.data
import pytest
import pickle
import numpy as np
from app import app  # Import Flask app from app.py
# Load the trained model
with open("model.pkl", "rb") as file:
model = pickle.load(file)
@pytest.fixture
def client():
"""Creates a test client for the Flask app."""
app.config["TESTING"] = True
with app.test_client() as client:
yield client
def test_home_route(client):
"""Test if the home route ("/") loads successfully."""
response = client.get("/")
assert response.status_code == 200
assert b"Enter Sepal and Petal dimensions" in response.data  # Check if form is in HTML
def test_valid_prediction(client):
"""Test model prediction with valid inputs."""
valid_data = {
"sepal_length": "5.1",
"sepal_width": "3.5",
"petal_length": "1.4",
"petal_width": "0.2"
}
response = client.post("/", data=valid_data)
assert response.status_code == 200
assert any(species.encode() in response.data for species in [b"Setosa", b"Versicolor", b"Virginica"])
def test_invalid_input(client):
"""Test handling of non-numeric input."""
invalid_data = {
"sepal_length": "abc",
"sepal_width": "xyz",
"petal_length": "1.4",
"petal_width": "0.2"
}
response = client.post("/", data=invalid_data)
assert response.status_code == 200
assert b"Invalid input! Please enter numeric values." in response.data
import pickle
import numpy as np
from flask import Flask, render_template, request
# Load the trained model BEFORE initializing Flask
with open("model.pkl", "rb") as file:
model = pickle.load(file)
# Initialize Flask app
app = Flask(__name__)
@app.route("/", methods=["GET", "POST"])
def home():
prediction = None
if request.method == "POST":
try:
# Get user input from form
features = [float(request.form[key]) for key in ["sepal_length", "sepal_width", "petal_length", "petal_width"]]
# Convert to numpy array and reshape for model input
input_data = np.array(features).reshape(1, -1)
# Make a prediction
predicted_class = model.predict(input_data)[0]
# Mapping of class labels to species names
species = {0: "Setosa", 1: "Versicolor", 2: "Virginica"}
prediction = species[predicted_class]
except ValueError:
prediction = "Invalid input! Please enter numeric values."
return render_template("index.html", prediction=prediction)
# Run Flask app safely
if __name__ == "__main__":
app.run(debug=True, use_reloader=False)  # Prevent auto-reloader issues
reticulate::repl_python()
